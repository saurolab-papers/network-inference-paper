
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Novak2022 - Mitotic kinase oscillation
#
# is http://identifiers.org/biomodels.db/MODEL2205190001
# is http://identifiers.org/biomodels.db/BIOMD0000001058
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_3, name = function 3
function_(k1,k2,b,substrate)=((k1+k2*b)*substrate)


# FunctionDefinition id = Constant_flux__irreversible, name = Constant flux (irreversible)
Constant_(v)=(v)


# FunctionDefinition id = function_16, name = function 16
functio_1(kass_,MBF,NRM1t,MBFtot)=(kass_*MBF*(NRM1t-(MBFtot-MBF)))


# FunctionDefinition id = function_4, name = function 4
functio_2(k,substrate,modifier)=(k*substrate*modifier)


# FunctionDefinition id = function_15, name = function 15
functio_3(kdis,MBFtot,MBF)=(kdis*(MBFtot-MBF))


# FunctionDefinition id = function_7, name = function 7
functio_4(k1,a,n,k2,k3)=(k1+k2*a^n/(k3^n+a^n))


# FunctionDefinition id = function_8, name = function 8
functio_5(kdsic_,kdsic,Clb,Cln,Jsic1,Sic1t)=((kdsic_+kdsic*Clb*(Cln+Clb)/(Jsic1+Cln+Clb))*Sic1t)


# FunctionDefinition id = function_2, name = function 2
functio_6(k,param)=(k*param)


# FunctionDefinition id = function_10, name = function 10
functio_7(kisbf,ClbM,SBF,Jsbf)=(kisbf*ClbM*SBF/(Jsbf+SBF))


# FunctionDefinition id = function_9, name = function 9
functio_8(kasbf_,kasbf,Cln,SBF,Jscbf)=((kasbf_+kasbf*Cln)*(1-SBF)/(Jscbf+1-SBF))


# FunctionDefinition id = function_13, name = function 13
functio_9(kacdc14,Polo,Cdc14,Jcdc14)=(kacdc14*Polo*(1-Cdc14)/(Jcdc14+1-Cdc14))


# FunctionDefinition id = function_14, name = function 14
functi_10(kicdc14,Cdc14,Jcdc14)=(kicdc14*Cdc14/(Jcdc14+Cdc14))


# FunctionDefinition id = function_11, name = function 11
functi_11(kacdh1_,kacdh1,Cdc14,Cdh1,Jcdh1)=((kacdh1_+kacdh1*Cdc14)*(1-Cdh1)/(Jcdh1+1-Cdh1))


# FunctionDefinition id = function_1, name = function 1
functi_12(k,modifier)=(k*modifier)


# FunctionDefinition id = function_12, name = function 12
functi_13(kicdh1_,Cln,kicdh1,Clb,Cdh1,Jcdh1)=((kicdh1_*Cln+kicdh1*Clb)*Cdh1/(Jcdh1+Cdh1))


# Compartment: id = compartment, name = compartment, constant
par compartme=1.0

# Parameter:   id =  kscln, name = kscln, constant
par kscln=0.2

# Parameter:   id =  kdcln, name = kdcln, constant
par kdcln=0.2

# Parameter:   id =  kasbf, name = kasbf', constant
par kasbf=1.0

# Parameter:   id =  kasbf_0, name = kasbf, constant
par kasbf_0=10.0

# Parameter:   id =  kisbf, name = kisbf, constant
par kisbf=25.0

# Parameter:   id =  jsbf, name = jsbf, constant
par jsbf=1.0

# Parameter:   id =  ksclbs, name = ksclbs, constant
par ksclbs=0.15

# Parameter:   id =  kdclbs, name = kdclbs', constant
par kdclbs=0.1

# Parameter:   id =  kdclbs_0, name = kdclbs, constant
par kdclbs_0=0.05

# Parameter:   id =  ksnrm1, name = ksnrm1, constant
par ksnrm1=0.05

# Parameter:   id =  kdnrm1, name = kdnrm1, constant
par kdnrm1=0.1

# Parameter:   id =  MBFtot, name = MBFtot, constant
par MBFtot=0.5

# Parameter:   id =  kass, name = kass', constant
par kass=1.0

# Parameter:   id =  kdiss, name = kdiss', constant
par kdiss=0.001

# Parameter:   id =  Jmbf, name = Jmbf, constant
par Jmbf=0.01

# Parameter:   id =  ksclbm, name = ksclbm', constant
par ksclbm=0.01

# Parameter:   id =  ksclbm_0, name = ksclbm, constant
par ksclbm_0=0.01

# Parameter:   id =  kdclbm, name = kdclbm', constant
par kdclbm=0.01

# Parameter:   id =  kdclbm_0, name = kdclbm, constant
par kdclbm_0=1.0

# Parameter:   id =  Jclbm, name = Jclbm, constant
par Jclbm=0.05

# Parameter:   id =  n, name = n, constant
par n=2.0

# Parameter:   id =  kspolo, name = kspolo, constant
par kspolo=0.01

# Parameter:   id =  kdpolo, name = kdpolo', constant
par kdpolo=0.01

# Parameter:   id =  kdpolo_0, name = kdpolo, constant
par kdpolo_0=1.0

# Parameter:   id =  kacdc14, name = kacdc14, constant
par kacdc14=1.0

# Parameter:   id =  kicdc14, name = kicdc14, constant
par kicdc14=0.25

# Parameter:   id =  jcdc14, name = jcdc14, constant
par jcdc14=0.01

# Parameter:   id =  kssic, name = kssic', constant
par kssic=0.02

# Parameter:   id =  kdsic, name = kdsic', constant
par kdsic=0.01

# Parameter:   id =  kdsic_0, name = kdsic, constant
par kdsic_0=2.0

# Parameter:   id =  Jsic1, name = Jsic1, constant
par Jsic1=0.01

# Parameter:   id =  Kdiss, name = Kdiss, constant
par Kdiss_1=0.05

# Parameter:   id =  kacdh1, name = kacdh1', constant
par kacdh1=1.0

# Parameter:   id =  kacdh1_0, name = kacdh1, constant
par kacdh1_0=10.0

# Parameter:   id =  kicdh1, name = kicdh1', constant
par kicdh1=0.2

# Parameter:   id =  kicdh1_0, name = kicdh1, constant
par kicdh1_0=10.0

# Parameter:   id =  Jcdh1, name = Jcdh1, constant
par Jcdh1=0.01

# Parameter:   id =  ndClbM, name = ndClbM, constant
par ndClbM=0.0

# Parameter:   id =  MBFa, name = MBFa, defined by a Rule

# Parameter:   id =  Clbt, name = Clbt, defined by a Rule

# Parameter:   id =  BB, name = BB, defined by a Rule

# Parameter:   id =  Sic1Clb, name = Sic1Clb, defined by a Rule

# Parameter:   id =  Clb, name = Clb, defined by a Rule

# Parameter:   id =  ClbM, name = ClbM, defined by a Rule

# Parameter:   id =  ClbS, name = ClbS, defined by a Rule

# Parameter:   id =  ModelValue_14, name = Initial for Jmbf, constant
par ModelValu=0.01

# Parameter:   id =  ModelValue_31, name = Initial for Kdiss, constant
par ModelVa_1=0.05

# Parameter:   id =  ModelValue_37, name = Initial for ndClbM, constant
par ModelVa_2=0.0

# assignmentRule: variable = Clbt
Clbt=ClbSt+ClbMt+ModelVa_2
aux Clbt=Clbt

# assignmentRule: variable = BB
BB=Sic1t+Clbt+ModelVa_1
aux BB=BB

# assignmentRule: variable = Sic1Clb
Sic1Clb=2*Sic1t*Clbt/(BB+(BB^2-4*Sic1t*Clbt)^(0.5))
aux Sic1Clb=Sic1Clb

# assignmentRule: variable = ClbM
ClbM=(ClbMt+ModelVa_2)*(Clbt-Sic1Clb)/Clbt
aux ClbM=ClbM

# assignmentRule: variable = MBFa
MBFa=MBF*Cln/(ModelValu+Cln)
aux MBFa=MBFa

# assignmentRule: variable = Clb
Clb=Clbt-Sic1Clb
aux Clb=Clb

# assignmentRule: variable = ClbS
ClbS=ClbSt*(Clbt-Sic1Clb)/Clbt
aux ClbS=ClbS

# Reaction: id = Transcription_of_Cln, name = Transcription of Cln

Transcrip=compartme*functi_12(kscln, SBF)

# Reaction: id = Autoregulation_of_Cln_synthesis, name = Autoregulation of Cln synthesis

Autoregul=compartme*kdcln*Cln

# Reaction: id = Activation_by_MBF_of_ClbS_transcription, name = Activation by MBF of ClbS transcription

Activatio=compartme*functio_6(ksclbs, MBFa)

# Reaction: id = Degradation_of_ClbS, name = Degradation of ClbS

Degradati=compartme*function_(kdclbs, kdclbs_0, Cdh1, ClbSt)

# Reaction: id = Synthesis_of_MBF, name = Synthesis of MBF

Synthesis=compartme*functio_3(kdiss, MBFtot, MBF)

# Reaction: id = Transcriptional_repression_of_MBF_by_Nrm1t, name = Transcriptional repression of MBF by Nrm1t

Transcr_1=compartme*functio_1(kass, MBF, Nrm1t, MBFtot)

# Reaction: id = Activation_of_Nrm1_transcription_by_MBF, name = Activation of Nrm1 transcription by MBF

Activat_1=compartme*functio_6(ksnrm1, MBFa)

# Reaction: id = Degradation_of_Nrm1_by_APC_C_Cdh1_complex, name = Degradation of Nrm1 by APC/C-Cdh1 complex

Degrada_1=compartme*functio_2(kdnrm1, Nrm1t, Cdh1)

# Reaction: id = Autocatalytic_synthesis_of_ClbMt, name = Autocatalytic synthesis of ClbMt

Autocatal=compartme*functio_4(ksclbm, ClbM, n, ksclbm_0, Jclbm)

# Reaction: id = APC_C_Cdh1_dependent_degradation_of_M_phase_cyclins, name = APC/C-Cdh1 dependent degradation of M-phase cyclins

APC_C_Cdh=compartme*function_(kdclbm, kdclbm_0, Cdh1, ClbMt)

# Reaction: id = Cdk1_dependent_synthesis_of_Polo_kinase, name = Cdk1-dependent synthesis of Polo-kinase

Cdk1_depe=compartme*functio_6(kspolo, ClbM)

# Reaction: id = Cdh1_dependent_degradation_of_Polo, name = Cdh1-dependent degradation of Polo

Cdh1_depe=compartme*function_(kdpolo, kdpolo_0, Cdh1, Polo)

# Reaction: id = Constant_synthesis_of_Sic1, name = Constant synthesis of Sic1

Constan_1=compartme*Constant_(kssic)

# Reaction: id = Sic1_phosphorylation_catalyzed_by_Clb_and_Cln_kinases_followed_by_Sic1_degradation, name = Sic1 phosphorylation catalyzed by Clb and Cln kinases followed by Sic1 degradation

Sic1_phos=compartme*functio_5(kdsic, kdsic_0, Clb, Cln, Jsic1, Sic1t)

# Reaction: id = Activation_of_SBF_by_Cln, name = Activation of SBF by Cln

Activat_2=compartme*functio_8(kasbf, kasbf_0, Cln, SBF, jsbf)

# Reaction: id = Inhibition_of_SBF_by_Cdk1, name = Inhibition of SBF by Cdk1

Inhibitio=compartme*functio_7(kisbf, ClbM, SBF, jsbf)

# Reaction: id = Activation_of_Cdh1_by_Cln, name = Activation of Cdh1 by Cln

Activat_3=compartme*functi_11(kacdh1, kacdh1_0, Cdc14, Cdh1, Jcdh1)

# Reaction: id = Inhibition_of_Cdh1_Cdk1, name = Inhibition of Cdh1 Cdk1

Inhibit_1=compartme*functi_13(kicdh1, Cln, kicdh1_0, Clb, Cdh1, Jcdh1)

# Reaction: id = Activation_of_Cdc14_by_Cln, name = Activation of Cdc14 by Cln

Activat_4=compartme*functio_9(kacdc14, Polo, Cdc14, jcdc14)

# Reaction: id = Inhibition_of_Cdc14_by_Cdk1, name = Inhibition of Cdc14 by Cdk1

Inhibit_2=compartme*functi_10(kicdc14, Cdc14, jcdc14)

# Species:   id = Cln, name = Cln, affected by kineticLaw

init Cln=0.1
dCln/dt=(1/(compartme))*(( 1.0 * Transcrip) + (-1.0 * Autoregul))

# Species:   id = ClbSt, name = ClbSt, affected by kineticLaw

init ClbSt=0.999999999999997
dClbSt/dt=(1/(compartme))*(( 1.0 * Activatio) + (-1.0 * Degradati))

# Species:   id = MBF, name = MBF, affected by kineticLaw

init MBF=0.05
dMBF/dt=(1/(compartme))*(( 1.0 * Synthesis) + (-1.0 * Transcr_1))

# Species:   id = Nrm1t, name = Nrm1t, affected by kineticLaw

init Nrm1t=0.509
dNrm1t/dt=(1/(compartme))*(( 1.0 * Activat_1) + (-1.0 * Degrada_1))

# Species:   id = ClbMt, name = ClbMt, affected by kineticLaw

init ClbMt=0.999999999999997
dClbMt/dt=(1/(compartme))*(( 1.0 * Autocatal) + (-1.0 * APC_C_Cdh))

# Species:   id = Polo, name = Polo, affected by kineticLaw

init Polo=0.249999999999999
dPolo/dt=(1/(compartme))*(( 1.0 * Cdk1_depe) + (-1.0 * Cdh1_depe))

# Species:   id = Sic1t, name = Sic1t, affected by kineticLaw

init Sic1t=0.0
dSic1t/dt=(1/(compartme))*(( 1.0 * Constan_1) + (-1.0 * Sic1_phos))

# Species:   id = SBF, name = SBF, affected by kineticLaw

init SBF=0.999999999999985
dSBF/dt=(1/(compartme))*(( 1.0 * Activat_2) + (-1.0 * Inhibitio))

# Species:   id = Cdh1, name = Cdh1, affected by kineticLaw

init Cdh1=0.0
dCdh1/dt=(1/(compartme))*(( 1.0 * Activat_3) + (-1.0 * Inhibit_1))

# Species:   id = Cdc14, name = Cdc14, affected by kineticLaw

init Cdc14=0.1
dCdc14/dt=(1/(compartme))*(( 1.0 * Activat_4) + (-1.0 * Inhibit_2))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

