
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Garde2020 - metabolic oscillations in Bacillus subtilis biofilms
#
# is http://identifiers.org/biomodels.db/MODEL2204180002
# is http://identifiers.org/biomodels.db/BIOMD0000001053
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_for_biomass_production, name = function for biomass production
function_(k2,Ap,Gp)=(k2*Ap*Gp)


# FunctionDefinition id = function_for_diffusion_of_Ammonia_from_interior_to_middle_layer, name = function for diffusion of Ammonia from interior to middle layer
functio_1(k3,Ai)=(k3*Ai)


# FunctionDefinition id = function_for_production_of_Ammonia_using_Glutamate_by_inner_cells, name = function for production of Ammonia using Glutamate by inner cells
functio_2(k5,Gi)=(k5*Gi)


# FunctionDefinition id = function_Gp_diffusion_to_the_interior_cells, name = function Gp diffusion to the interior cells
functio_3(k4,Gp)=(k4*Gp)


# FunctionDefinition id = function_for_positive_feedback_of_Gp_on_itself, name = function for positive feedback of Gp on itself
functio_4(k1,Ge,Gp)=(k1*Ge*Gp)


# FunctionDefinition id = function_for_ammonia_diffusion_from_middle_layer_to_periphery, name = function for ammonia diffusion from middle layer to periphery
functio_5(k3,Am)=(k3*Am)


# FunctionDefinition id = function_for_loss_of_Ammonia_du_to_diffusion_to_the_environment, name = function for loss of Ammonia du to diffusion to the environment
functio_6(k3,Ap)=(k3*Ap)


# FunctionDefinition id = function_for_diffusion_of_Glutamate_from_middle_to_interior_layer, name = function for diffusion of Glutamate from middle to interior layer
functio_7(k4,Gm)=(k4*Gm)


# FunctionDefinition id = function_for_production_of_Ammonia_in_middle_layer_using_glutamate, name = function for production of Ammonia in middle layer using glutamate
functio_8(k5,Gm)=(k5*Gm)


# FunctionDefinition id = function_for_use_of_glutamate_in_middle_layer_for_biomass_production, name = function for use of glutamate in middle layer for biomass production
functio_9(k2,Am,Gm)=(k2*Am*Gm)


# Compartment: id = Biofilm, name = Biofilm, constant
par Biofilm=1.0

# Parameter:   id =  k1, name = k1, constant
par k1=0.34

# Parameter:   id =  k2, name = k2, constant
par k2=5.3

# Parameter:   id =  k3, name = k3, constant
par k3=4.0

# Parameter:   id =  k4, name = k4, constant
par k4=2.0

# Parameter:   id =  k5, name = k5, constant
par k5=2.3

# Parameter:   id =  Ge, name = Ge, constant
par Ge=30.0

# Reaction: id = Positive_feedback_of_Gp_on_itself, name = Positive feedback of Gp on itself

Positive_=Biofilm*functio_4(k1, Ge, Gp)

# Reaction: id = Gp_diffusion_to_the_interior_cells, name = Gp diffusion to the interior cells

Gp_diffus=Biofilm*functio_3(k4, Gp)

# Reaction: id = Biomass_production, name = Biomass production

Biomass_p=Biofilm*function_(k2, Ap, Gp)

# Reaction: id = Diffusion_of_Ammonia_from_interior_to_middle_layer, name = Diffusion of Ammonia from interior to middle layer

Diffusion=Biofilm*functio_1(k3, Ai)

# Reaction: id = Production_of_Ammonia_using_Glutamate_by_inner_cells, name = Production of Ammonia using Glutamate by inner cells

Productio=Biofilm*functio_2(k5, Gi)

# Reaction: id = Ammonia_diffusion_from_middle_layer_to_periphery, name = Ammonia diffusion from middle layer to periphery

Ammonia_d=Biofilm*functio_5(k3, Am)

# Reaction: id = loss_of_Ammonia_du_to_diffusion_to_the_environment, name = loss of Ammonia du to diffusion to the environment

loss_of_A=Biofilm*functio_6(k3, Ap)

# Reaction: id = Diffusion_of_Glutamate_from_middle_to_interior_layer, name = Diffusion of Glutamate from middle to interior layer

Diffusi_1=Biofilm*functio_7(k4, Gm)

# Reaction: id = Production_of_Ammonia_in_middle_layer_using_glutamate, name = Production of Ammonia in middle layer using glutamate

Product_1=Biofilm*functio_8(k5, Gm)

# Reaction: id = Use_of_glutamate_in_middle_layer_for_biomass_production, name = Use of glutamate in middle layer for biomass production

Use_of_gl=Biofilm*functio_9(k2, Am, Gm)

# Species:   id = Gp, name = Gp, affected by kineticLaw

init Gp=0.999999999999999
dGp/dt=(1/(Biofilm))*(( 1.0 * Positive_) + (-1.0 * Gp_diffus) + (-1.0 * Biomass_p))

# Species:   id = Ai, name = Ai, affected by kineticLaw

init Ai=0.999999999999999
dAi/dt=(1/(Biofilm))*((-1.0 * Diffusion) + ( 1.0 * Productio))

# Species:   id = Am, name = Am, affected by kineticLaw

init Am=0.999999999999999
dAm/dt=(1/(Biofilm))*(( 1.0 * Diffusion) + (-1.0 * Ammonia_d) + ( 1.0 * Product_1))

# Species:   id = Ap, name = Ap, affected by kineticLaw

init Ap=0.999999999999999
dAp/dt=(1/(Biofilm))*(( 1.0 * Ammonia_d) + (-1.0 * loss_of_A))

# Species:   id = Gm, name = Gm, affected by kineticLaw

init Gm=1.0
dGm/dt=(1/(Biofilm))*(( 1.0 * Gp_diffus) + (-1.0 * Diffusi_1) + (-1.0 * Product_1) + (-1.0 * Use_of_gl))

# Species:   id = Gi, name = Gi, affected by kineticLaw

init Gi=1.0
dGi/dt=(1/(Biofilm))*((-1.0 * Productio) + ( 1.0 * Diffusi_1))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

