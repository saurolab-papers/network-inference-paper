
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#

#
# Model name = Alharbi2020 - Tumor and immune system competition
#
#

# some function definitions that are allowed in SBML but not valid in xpp
ceil(x)=flr(1+x)

@delay=50


# FunctionDefinition id = function_for_reaction_1, name = function for reaction 1
function_(r,N)=(r*N)


# FunctionDefinition id = function_for_reaction_2, name = function for reaction 2
functio_1(r,N,B1)=(r*N^2*B1)


# FunctionDefinition id = function_for_reaction_3, name = function for reaction 3
functio_2(r,N,I)=(r*N*I)


# FunctionDefinition id = function_for_reaction_4, name = function for reaction 4
functio_3(gamma,N,T)=(gamma*N*T)


# FunctionDefinition id = function_for_reaction_5, name = function for reaction 5
functio_4(alpha1,T)=(alpha1*T)


# FunctionDefinition id = function_for_reaction_9, name = function for reaction 9
functio_5(sigma)=(sigma)


# FunctionDefinition id = function_for_reaction_10, name = function for reaction 10
functio_6(delta,I)=(delta*I)


# FunctionDefinition id = function_for_reaction_11, name = function for reaction 11
functio_7(rho,N,I,m)=(rho*N*I/(N+m))


# FunctionDefinition id = function_for_reaction_12, name = function for reaction 12
functio_8(rho1,T,I,m1)=(rho1*T*I/(m1+T))


# FunctionDefinition id = function_for_reaction_13, name = function for reaction 13
functio_9(mu,N,I)=(mu*N*I)


# FunctionDefinition id = function_for_reaction_14, name = function for reaction 14
functi_10(mu1,T,I)=(mu1*T*I)


# FunctionDefinition id = function_for_reaction_6, name = function for reaction 6
functi_11(alpha1,alpha2,T)=(alpha1*alpha2*T^2)


# FunctionDefinition id = function_for_reaction_7, name = function for reaction 7
functi_12(beta2,N,T)=(beta2*N*T)


# FunctionDefinition id = function_for_reaction_8, name = function for reaction 8
functi_13(alpha3,T,I)=(alpha3*T*I)


# Compartment: id = Tissue, name = Tissue, constant
par Tissue=1.0

# Parameter:   id =  r, name = r, constant
par r=0.4312

# Parameter:   id =  beta1, name = beta1, constant
par beta1=2.99E-6

# Parameter:   id =  n, name = n, constant
par n=0.1379

# Parameter:   id =  gamma, name = gamma, constant
par gamma=0.9314

# Parameter:   id =  alpha1, name = alpha1, constant
par alpha1=0.4426

# Parameter:   id =  alpha2, name = alpha2, constant
par alpha2=0.4

# Parameter:   id =  beta2, name = beta2, constant
par beta2=1.189

# Parameter:   id =  alpha3, name = alpha3, constant
par alpha3=0.1469

# Parameter:   id =  sigma, name = sigma, constant
par sigma=0.7

# Parameter:   id =  delta, name = delta, constant
par delta=0.57

# Parameter:   id =  rho, name = rho, constant
par rho=0.271

# Parameter:   id =  m, name = m, constant
par m=0.813

# Parameter:   id =  m1, name = m1, constant
par m1=0.862

# Parameter:   id =  rho1, name = rho1, constant
par rho1=0.7829

# Parameter:   id =  mu, name = mu, constant
par mu=0.813

# Parameter:   id =  mu1, name = mu1, constant
par mu1=0.3634

# Reaction: id = Normal_cell_proliferation, name = Normal cell proliferation

Normal_ce=Tissue*function_(r, N_1)

# Reaction: id = division_of_normal_cells_into_abnormal_cells, name = division of normal cells into abnormal cells

division_=Tissue*functio_1(r, N_1, beta1)

# Reaction: id = Normal_cells_eradication_by_immune_cells, name = Normal cells eradication by immune cells

Normal__1=Tissue*functio_2(r, N_1, I)

# Reaction: id = Normal_cells_eradication_or_inhibition_by_tumor_cells, name = Normal cells eradication or inhibition by tumor cells

Normal__2=Tissue*functio_3(gamma, N_1, T_renamed)

# Reaction: id = Tumor_cells_proliferation, name = Tumor cells proliferation

Tumor_cel=Tissue*functio_4(alpha1, T_renamed)

# Reaction: id = decline_of_tumor_cells, name = decline of tumor cells

decline_o=Tissue*functi_11(alpha1, alpha2, T_renamed)

# Reaction: id = conversion_of_abnormal_cells_into_tumor_cells, name = conversion of abnormal cells into tumor cells

conversio=Tissue*functi_12(beta2, N_1, T_renamed)

# Reaction: id = tumor_cell_eradication_or_inhibition_by_immune_cells, name = tumor cell eradication or inhibition by immune cells

tumor_c_1=Tissue*functi_13(alpha3, T_renamed, I)

# Reaction: id = constant_source_of_immune_system_response, name = constant source of immune system response

constant_=Tissue*functio_5(sigma)

# Reaction: id = immune_cells_death, name = immune cells death

immune_ce=Tissue*functio_6(delta, I)

# Reaction: id = elimination_of_tumor_cells_due_to_the_detection_of_their_appearance, name = elimination of tumor cells due to the detection of their appearance

eliminati=Tissue*functio_7(rho, N_1, I, m)

# Reaction: id = elimination_of_tumor_cells_due_to_the_detection_of_their_activity, name = elimination of tumor cells due to the detection of their activity

elimina_1=Tissue*functio_8(rho1, T_renamed, I, m1)

# Reaction: id = death_of_immune_cells_after_interaction_with_tumor, name = death of immune cells after interaction with tumor

death_of_=Tissue*functio_9(mu, N_1, I)

# Reaction: id = suppression_of_immune_activity_by_tumor_cells, name = suppression of immune activity by tumor cells

suppressi=Tissue*functi_10(mu1, T_renamed, I)

# Species:   id = I, name = I, affected by kineticLaw

init I=0.999999999999994
dI/dt=(1/(Tissue))*(( 1.0 * constant_) + (-1.0 * immune_ce) + ( 1.0 * eliminati) + ( 1.0 * elimina_1) + (-1.0 * death_of_) + (-1.0 * suppressi))

# Species:   id = N, name = N, affected by kineticLaw

par N_1=0.999999999999993
aux N_1=N_1
dN_1/dt=(1/(Tissue))*(( 1.0 * Normal_ce) + (-1.0 * division_) + (-1.0 * Normal__1) + (-1.0 * Normal__2))

# Species:   id = T, name = T, affected by kineticLaw

par T_renamed=1.22
aux T_renamed=T_renamed
dT_renamed/dt=(1/(Tissue))*(( 1.0 * Tumor_cel) + (-1.0 * decline_o) + ( 1.0 * conversio) + (-1.0 * tumor_c_1))

@ meth=cvode, tol=1e-6, atol=1e-8
# @ maxstor=1e6
@ bound=40000, total=200
done

