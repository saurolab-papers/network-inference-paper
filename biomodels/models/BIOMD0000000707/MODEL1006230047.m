
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#
# The conversion system has the following limitations:
#  - You may have to re order some reactions and Assignment Rules definition
#  - Delays are not taken into account
#  - You should change the lsode parameters (start, end, steps) to get better results
#

#
# The following line is there to be sure that Octave think that this file 
# is a script and not function file
#
1;

#
# Model name = Revilla2003_HIV1therapy
#
# is urn:miriam:biomodels.db:MODEL1006230047
# isDescribedBy urn:miriam:pubmed:12941536
#
function z=pow(x,y),z=x^y;endfunction
function z=root(x,y),z=y^(1/x);endfunction
function z = piecewise(varargin)
	numArgs = nargin;
	result = 0;
	foundResult = 0;
	for k=1:2: numArgs-1
		if varargin{k+1} == 1
			result = varargin{k};
			foundResult = 1;
			break;
		endif
	end
	if foundResult == 0
		result = varargin{numArgs};
	endif
z = result;
endfunction

function xdot=f(x,t)
# Compartment: id = COMpartment, name = COMpartment, constant
	compartment_COMpartment=1.0;
# Parameter:   id =  time_environment, name = time
	global_par_time_environment=NaN;
# Parameter:   id =  x, name = x
# Parameter:   id =  lamda, name = lamda
	global_par_lamda=2.0;
# Parameter:   id =  d, name = d
	global_par_d=0.01;
# Parameter:   id =  y, name = y
# Parameter:   id =  a, name = a
	global_par_a=0.33;
# Parameter:   id =  z, name = z
# Parameter:   id =  b, name = b
	global_par_b=2.0;
# Parameter:   id =  v, name = v
# Parameter:   id =  k, name = k
	global_par_k=50.0;
# Parameter:   id =  u, name = u
	global_par_u=2.0;
# Parameter:   id =  w, name = w
# Parameter:   id =  c, name = c
	global_par_c=2000.0;
# Parameter:   id =  q, name = q
	global_par_q=2.0;
# Parameter:   id =  alpha, name = alpha
	global_par_alpha=0.0040;
# Parameter:   id =  beta, name = beta
	global_par_beta=0.0040;
# rateRule: variable = x
global_par_x = x(1);
# rateRule: variable = y
global_par_y = x(2);
# rateRule: variable = z
global_par_z = x(3);
# rateRule: variable = v
global_par_v = x(4);
# rateRule: variable = w
global_par_w = x(5);
	xdot=zeros(5,1);
	# rateRule: variable = x
	xdot(1) = 1*global_par_lamda-(global_par_d*global_par_x+1*global_par_beta*global_par_x*global_par_v);

	# rateRule: variable = y
	xdot(2) = 1*global_par_beta*global_par_x*global_par_v-(global_par_a*global_par_y+1*global_par_alpha*global_par_w*global_par_y);

	# rateRule: variable = z
	xdot(3) = 1*global_par_alpha*global_par_w*global_par_y-global_par_b*global_par_z;

	# rateRule: variable = v
	xdot(4) = global_par_k*global_par_y-global_par_u*global_par_v;

	# rateRule: variable = w
	xdot(5) = global_par_c*global_par_z-global_par_q*global_par_w;

endfunction

#Initial conditions vector
x0=zeros(5,1);
x0(1) = 3.0;
x0(2) = 6.0;
x0(3) = 0.0;
x0(4) = 149.0;
x0(5) = 1.0;


#Creating linespace
t=linspace(0,90,100);

#Solving equations
x=lsode("f",x0,t);

#ploting the results
plot(t,x);
