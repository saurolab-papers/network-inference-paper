
#
# This file is automatically generated with 
# the System Biology Format Converter (http://sbfc.sourceforge.net/)
# from an SBML file.
#
# The conversion system has the following limitations:
#  - You may have to re order some reactions and Assignment Rules definition
#  - Delays are not taken into account
#  - You should change the lsode parameters (start, end, steps) to get better results
#

#
# The following line is there to be sure that Octave think that this file 
# is a script and not function file
#
1;

#
# Model name = Kirschner1998_Immunotherapy_Tumour
#
# is urn:miriam:biomodels.db:MODEL1006230038
# isDescribedBy urn:miriam:pubmed:9785481
#
function z=pow(x,y),z=x^y;endfunction
function z=root(x,y),z=y^(1/x);endfunction
function z = piecewise(varargin)
	numArgs = nargin;
	result = 0;
	foundResult = 0;
	for k=1:2: numArgs-1
		if varargin{k+1} == 1
			result = varargin{k};
			foundResult = 1;
			break;
		endif
	end
	if foundResult == 0
		result = varargin{numArgs};
	endif
z = result;
endfunction

function xdot=f(x,t)
# Compartment: id = COMpartment, name = COMpartment, constant
	compartment_COMpartment=1.0;
# Parameter:   id =  tau, name = tau
	global_par_tau=NaN;
# Parameter:   id =  mu2, name = mu2
	global_par_mu2=0.03;
# Parameter:   id =  c, name = c
	global_par_c=0.025;
# Parameter:   id =  p1, name = p1
	global_par_p1=0.1245;
# Parameter:   id =  g1, name = g1
	global_par_g1=2.0E-7;
# Parameter:   id =  s1, name = s1
	global_par_s1=0.0;
# Parameter:   id =  x, name = x
# Parameter:   id =  y, name = y
# Parameter:   id =  r2, name = r2
	global_par_r2=0.18;
# Parameter:   id =  a, name = a
	global_par_a=1.0;
# Parameter:   id =  b, name = b
	global_par_b=1.0E-9;
# Parameter:   id =  g2, name = g2
	global_par_g2=100000.0;
# Parameter:   id =  z, name = z
# Parameter:   id =  mu3, name = mu3
	global_par_mu3=10.0;
# Parameter:   id =  p2, name = p2
	global_par_p2=5.0;
# Parameter:   id =  g3, name = g3
	global_par_g3=1000.0;
# Parameter:   id =  s2, name = s2
	global_par_s2=0.0;
# rateRule: variable = x
global_par_x = x(1);
# rateRule: variable = y
global_par_y = x(2);
# rateRule: variable = z
global_par_z = x(3);
	xdot=zeros(3,1);
	# rateRule: variable = x
	xdot(1) = global_par_c*global_par_y-global_par_mu2*global_par_x+global_par_p1*global_par_x*global_par_z/(global_par_g1+global_par_z)+global_par_s1;

	# rateRule: variable = y
	xdot(2) = global_par_r2*global_par_y*(1-global_par_b*global_par_y)-global_par_a*global_par_x*global_par_y/(global_par_g2+global_par_y);

	# rateRule: variable = z
	xdot(3) = global_par_p2*global_par_x*global_par_y/(global_par_g3+global_par_y)-global_par_mu3*global_par_z+global_par_s2;

endfunction

#Initial conditions vector
x0=zeros(3,1);
x0(1) = NaN;
x0(2) = 1.0;
x0(3) = NaN;


#Creating linespace
t=linspace(0,90,100);

#Solving equations
x=lsode("f",x0,t);

#ploting the results
plot(t,x);
