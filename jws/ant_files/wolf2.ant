// Created by libAntimony v2.13.2
model *wolf2()

  // Compartments and Species:
  species ERKMEKPP, ERKP, ERKPMEKPP, ERKPP, ERKPPPase3, ERKPPase3, $GDP, GS;
  species $GTP, MEKP, MEKPP, MEKPPPase2, MEKPPase2, MEKPRafa, MEKRafa, PLCgP;
  species PLCgPI, R2, R2P, RG, RGAP, RGS, RGSr, RGSrD, RGSrT, RGrT, RPL, RPLP;
  species RSh, RShGSr, RShGSrD, RShGSrT, RShP, RShPG, RShPGS, Ra, Rafa, RafaPase1;
  species RafrT, ShP, ShPG, ShPGS, rasD, rasT, $sink, $source;

  // Assignment Rules:
  EGF := (-Ra - 2*(R2 + R2P + RPL + RPLP + RGAP + RG + RGS + RSh + RShP + RShPG + RShPGS + RShGSrD + RShGSr + RShGSrT + RGSrD + RGSr + RGSrT + RGrT)) + Pool1;
  ERK := -(ERKMEKPP + ERKP + ERKPMEKPP + ERKPP + ERKPPPase3 + ERKPPase3) + Pool11;
  GAP := -(RGAP + RGrT) + Pool8;
  Grb := -(GS + RG + RGS + ShPG + RShPG + ShPGS + RShPGS + RShGSrD + RShGSr + RShGSrT + RGSrD + RGSr + RGSrT) + Pool6;
  MEK := -(MEKRafa + MEKP + MEKPRafa + MEKPP + MEKPPPase2 + MEKPPase2 + ERKMEKPP + ERKPMEKPP) + Pool10;
  PLCg := -(RPL + RPLP + PLCgP + PLCgPI) + Pool3;
  Pase1 := -RafaPase1 + Pool12;
  Pase2 := -(MEKPPPase2 + MEKPPase2) + Pool13;
  R := (-Ra - 2*(R2 + R2P + RPL + RPLP + RGAP + RG + RGS + RSh + RShP + RShPG + RShPGS + RShGSrD + RShGSr + RShGSrT + RGSrD + RGSr + RGSrT + RGrT)) + Pool2;
  Raf := -(RafrT + Rafa + RafaPase1 + MEKRafa + MEKPRafa) + Pool9;
  SOS := -(GS + RGS + ShPGS + RShPGS + RShGSrD + RShGSr + RShGSrT + RGSrD + RGSr + RGSrT) + Pool4;
  Shc := -(ShP + ShPG + RSh + RShP + RShPG + RShPGS + ShPGS + RShGSrD + RShGSr + RShGSrT) + Pool5;
  ras := -(rasD + rasT + RGrT + RShGSrD + RShGSr + RShGSrT + RGSrD + RGSr + RGSrT + RafrT) + Pool7;

  // Reactions:
  v_1: $source -> Ra; kon1*R*EGF - koff1*Ra;
  v_10: R2P -> RG; kon10*R2P*Grb - koff10*RG;
  v_11: RG -> RGS; kon11*RG*SOS - koff11*RGS;
  v_12: RGS -> R2P + GS; kon12*RGS - koff12*R2P*GS;
  v_13: GS -> $sink; kon13*GS - koff13*Grb*SOS;
  v_14: R2P -> RSh; kon14*R2P*Shc - koff14*RSh;
  v_15: RSh -> RShP; kon15*RSh - koff15*RShP;
  v_16: RShP -> ShP + R2P; kon16*RShP - koff16*ShP*R2P;
  v_17: RShP -> RShPG; kon17*RShP*Grb - koff17*RShPG;
  v_18: RShPG -> R2P + ShPG; kon18*RShPG - koff18*R2P*ShPG;
  v_19: RShPG -> RShPGS; kon19*RShPG*SOS - koff19*RShPGS;
  v_2: 2 Ra -> R2; kon2*Ra*Ra - koff2*R2;
  v_20: RShPGS -> ShPGS + R2P; kon20*RShPGS - koff20*ShPGS*R2P;
  v_21: ShPG -> ShPGS; kon21*ShPG*SOS - koff21*ShPGS;
  v_22: ShP -> ShPG; kon22*ShP*Grb - koff22*ShPG;
  v_23: ShP -> $sink; vmax23*ShP/(kmax23 + ShP);
  v_24: ShPGS -> ShP + GS; kon24*ShPGS - koff24*ShP*GS;
  v_25: RShP + GS -> RShPGS; kon25*RShP*GS - koff25*RShPGS;
  v_26: rasD -> $GDP; kon26*rasD - koff26*GDP*ras;
  v_27: $GTP -> rasT; kon27*ras*GTP - koff27*rasT;
  v_28: rasT -> rasD; kon28*rasT;
  v_29: RShPGS + rasD -> RShGSrD; kon29*va*RShPGS*rasD/(1 + (ERKPP*kii)^kn) - koff29*vd*RShGSrD;
  v_3: R2 -> R2P; kon3*R2 - koff3*R2P;
  v_30: RShGSrD -> RShGSr + $GDP; kon30*RShGSrD - koff30*RShGSr*GDP;
  v_31: RShGSr + $GTP -> RShGSrT; kon31*RShGSr*GTP - koff31*RShGSrT;
  v_32: RShGSrT -> RShPGS + rasT; kon32*vd*RShGSrT - koff32*va*RShPGS*rasT;
  v_33: RShPGS -> RShGSr; kon33*va*RShPGS*ras/(1 + (ERKPP*kii)^kn) - koff33*vd*RShGSr;
  v_34: RGS + rasD -> RGSrD; kon34*va*RGS*rasD/(1 + (ERKPP*kii)^kn) - koff34*vd*RGSrD;
  v_35: RGSrD -> RGSr + $GDP; kon35*RGSrD - koff35*RGSr*GDP;
  v_36: RGSr + $GTP -> RGSrT; kon36*RGSr*GTP - koff36*RGSrT;
  v_37: RGSrT -> RGS + rasT; kon37*vd*RGSrT - koff37*va*RGS*rasT;
  v_38: RGS -> RGSr; kon38*va*RGS*ras/(1 + (ERKPP*kii)^kn) - koff38*vd*RGSr;
  v_39: rasT -> RafrT; kon39*Raf*rasT - koff39*RafrT;
  v_4: R2P -> R2; vmax4*R2P/(kmax4 + R2P);
  v_40: RafrT -> rasT + Rafa; kon40*RafrT - koff40*rasT*Rafa;
  v_41: Rafa -> RafaPase1; kon41*Rafa*Pase1 - koff41*RafaPase1;
  v_42: RafaPase1 -> $sink; kon42*RafaPase1;
  v_43: Rafa -> MEKRafa; kon43*MEK*Rafa - koff43*MEKRafa;
  v_44: MEKRafa -> MEKP + Rafa; kon44*MEKRafa;
  v_45: MEKP + Rafa -> MEKPRafa; kon45*MEKP*Rafa - koff45*MEKPRafa;
  v_46: MEKPRafa -> Rafa + MEKPP; kon46*MEKPRafa;
  v_47: MEKPP -> MEKPPPase2; kon47*MEKPP*Pase2 - koff47*MEKPPPase2;
  v_48: MEKPPPase2 -> MEKP; kon48*MEKPPPase2;
  v_49: MEKP -> MEKPPase2; kon49*MEKP*Pase2 - koff49*MEKPPase2;
  v_5: R2P -> RPL; kon5*R2P*PLCg - koff5*RPL;
  v_50: MEKPPase2 -> $sink; kon50*MEKPPase2;
  v_51: MEKPP -> ERKMEKPP; kon51*ERK*MEKPP - koff51*ERKMEKPP;
  v_52: ERKMEKPP -> ERKP + MEKPP; kon52*ERKMEKPP;
  v_53: ERKP + MEKPP -> ERKPMEKPP; kon53*ERKP*MEKPP - koff53*ERKPMEKPP;
  v_54: ERKPMEKPP -> ERKPP + MEKPP; kon54*ERKPMEKPP;
  v_55: ERKPP -> ERKPPPase3; kon55*ERKPP*Pase3 - koff55*ERKPPPase3;
  v_56: ERKPPPase3 -> ERKP; kon56*ERKPPPase3;
  v_57: ERKP -> ERKPPase3; kon57*ERKP*Pase3 - koff57*ERKPPase3;
  v_58: ERKPPase3 -> $sink; kon58*ERKPPase3;
  v_59: R2P -> RGAP; kon59*ka*GAP*R2P - koff59*RGAP;
  v_6: RPL -> RPLP; kon6*RPL - koff6*RPLP;
  v_60: rasT + RGAP -> RGrT; kon60*ka*va*rasT*RGAP - koff60*vd*RGrT;
  v_61: RGrT -> rasD + RGAP; kon61*ka*RGrT;
  v_7: RPLP -> R2P + PLCgP; kon7*RPLP - koff7*R2P*PLCgP;
  v_8: PLCgP -> $sink; vmax8*PLCgP/(kmax8 + PLCgP);
  v_9: PLCgP -> PLCgPI; kon9*PLCgP - koff9*PLCgPI;

  // Species initializations:
  ERKMEKPP = 0;
  ERKP = 0;
  ERKPMEKPP = 0;
  ERKPP = 0;
  ERKPPPase3 = 0;
  ERKPPase3 = 0;
  GDP = 500;
  GS = 27.0125;
  GTP = 10000;
  MEKP = 0;
  MEKPP = 0;
  MEKPPPase2 = 0;
  MEKPPase2 = 0;
  MEKPRafa = 0;
  MEKRafa = 0;
  PLCgP = 0;
  PLCgPI = 0;
  R2 = 0;
  R2P = 0;
  RG = 0;
  RGAP = 0;
  RGS = 0;
  RGSr = 0;
  RGSrD = 0;
  RGSrT = 0;
  RGrT = 0;
  RPL = 0;
  RPLP = 0;
  RSh = 0;
  RShGSr = 0;
  RShGSrD = 0;
  RShGSrT = 0;
  RShP = 0;
  RShPG = 0;
  RShPGS = 0;
  Ra = 0;
  Rafa = 0;
  RafaPase1 = 0;
  RafrT = 0;
  ShP = 0;
  ShPG = 0;
  ShPGS = 0;
  rasD = 77.3499;
  rasT = 7.65;
  sink = 1;
  source = 1;

  // Variable initializations:
  Pool1 = 680;
  Pool11 = 200;
  Pool8 = 12;
  Pool6 = 85;
  Pool10 = 200;
  Pool3 = 105;
  Pool12 = 50;
  Pool13 = 50;
  Pase3 = 0;
  Pool14 = 100;
  Pool2 = 100;
  Pool4 = 34;
  Pool5 = 150;
  Pool7 = 85;
  Pool9 = 50;
  ka = 0.83;
  kii = 3;
  kmax23 = 340;
  kmax4 = 50;
  kmax8 = 100;
  kn = 1;
  koff1 = 0.06;
  koff10 = 0.2;
  koff11 = 0.06;
  koff12 = 0.0028;
  koff13 = 0.0001;
  koff14 = 0.6;
  koff15 = 0.06;
  koff16 = 0.0009;
  koff17 = 0.1;
  koff18 = 0.0009;
  koff19 = 0.0214;
  koff2 = 0.1;
  koff20 = 0.00024;
  koff21 = 0.064;
  koff22 = 0.1;
  koff24 = 0.021;
  koff25 = 0.0429;
  koff26 = 0.00027;
  koff27 = 0.00078;
  koff29 = 0.76;
  koff3 = 0.01;
  koff30 = 0.093;
  koff31 = 2.4;
  koff32 = 0.0063;
  koff33 = 0.001;
  koff34 = 1.2;
  koff35 = 0.1;
  koff36 = 80;
  koff37 = 0.005;
  koff38 = 0.0016;
  koff39 = 0.0053;
  koff40 = 0.0007;
  koff41 = 0.2;
  koff43 = 0.01833;
  koff45 = 0.01833;
  koff47 = 0.8;
  koff49 = 0.5;
  koff5 = 0.2;
  koff51 = 0.033;
  koff53 = 0.033;
  koff55 = 0.6;
  koff57 = 0.5;
  koff59 = 0;
  koff6 = 0.05;
  koff60 = 0;
  koff7 = 0.006;
  koff9 = 0.03;
  kon1 = 0.003;
  kon10 = 0.0015;
  kon11 = 0.01;
  kon12 = 0.15;
  kon13 = 0.0015;
  kon14 = 0.09;
  kon15 = 6;
  kon16 = 0.3;
  kon17 = 0.003;
  kon18 = 0.3;
  kon19 = 0.01;
  kon2 = 0.01;
  kon20 = 0.12;
  kon21 = 0.03;
  kon22 = 0.003;
  kon24 = 0.1;
  kon25 = 0.009;
  kon26 = 5.4e-06;
  kon27 = 0.078;
  kon28 = 0.015;
  kon29 = 1.9e-05;
  kon3 = 1;
  kon30 = 46.5;
  kon31 = 0.003;
  kon32 = 806.4;
  kon33 = 0.000625;
  kon34 = 3e-05;
  kon35 = 50;
  kon36 = 0.1;
  kon37 = 640;
  kon38 = 0.001;
  kon39 = 0.01;
  kon40 = 1;
  kon41 = 0.0717;
  kon42 = 1;
  kon43 = 0.0111;
  kon44 = 3.5;
  kon45 = 0.0111;
  kon46 = 2.9;
  kon47 = 0.0143;
  kon48 = 0.058;
  kon49 = 0.00025;
  kon5 = 0.06;
  kon50 = 0.058;
  kon51 = 0.01;
  kon52 = 16;
  kon53 = 0.01;
  kon54 = 5.7;
  kon55 = 0.0145;
  kon56 = 0.27;
  kon57 = 0.05;
  kon58 = 0.3;
  kon59 = 0;
  kon6 = 1;
  kon60 = 0;
  kon61 = 0;
  kon7 = 0.3;
  kon9 = 1;
  va = 250;
  vd = 1;
  vmax23 = 1.7;
  vmax4 = 450;
  vmax8 = 1;

  // Other declarations:
  var EGF, Pool1, ERK, Pool11, GAP, Pool8, Grb, Pool6, MEK, Pool10, PLCg;
  var Pool3, Pase1, Pool12, Pase2, Pool13, Pase3, Pool14, Pool2, Pool4, Pool5;
  var Pool7, Pool9, R, Raf, SOS, Shc, ka, kii, kmax23, kmax4, kmax8, kn, koff1;
  var koff10, koff11, koff12, koff13, koff14, koff15, koff16, koff17, koff18;
  var koff19, koff2, koff20, koff21, koff22, koff24, koff25, koff26, koff27;
  var koff29, koff3, koff30, koff31, koff32, koff33, koff34, koff35, koff36;
  var koff37, koff38, koff39, koff40, koff41, koff43, koff45, koff47, koff49;
  var koff5, koff51, koff53, koff55, koff57, koff59, koff6, koff60, koff7;
  var koff9, kon1, kon10, kon11, kon12, kon13, kon14, kon15, kon16, kon17;
  var kon18, kon19, kon2, kon20, kon21, kon22, kon24, kon25, kon26, kon27;
  var kon28, kon29, kon3, kon30, kon31, kon32, kon33, kon34, kon35, kon36;
  var kon37, kon38, kon39, kon40, kon41, kon42, kon43, kon44, kon45, kon46;
  var kon47, kon48, kon49, kon5, kon50, kon51, kon52, kon53, kon54, kon55;
  var kon56, kon57, kon58, kon59, kon6, kon60, kon61, kon7, kon9, ras, va;
  var vd, vmax23, vmax4, vmax8;
end

wolf2 is "wolf2"
